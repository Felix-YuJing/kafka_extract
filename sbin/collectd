#!/usr/bin/env python3
# -*- coding:utf-8 -*-

import os
import signal
import sys
import time

home = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, home)

from src.collector import TopicCollector
from src.utils import get_process_pid


def service(opt):
    """ collectd 服务管理

    :参数 opt: 管理参数 [ status | start | stop ]
    """

    pidfile = "/tmp/kafka_extract.pid"
     
    if opt == "start":
        pid = get_process_pid(pidfile)
    
        if pid:
            print("Collected has been started, pid: %s" % pid)
            sys.exit(0)
    
        try:
            pid = os.fork()
        
            if pid > 0:
                sys.exit(0)
    
        except OSError:
            sys.exit(1)
    
        os.chdir("/")
        os.setsid()
        os.umask(0)
    
        try:   
            pid = os.fork()   
            
            if pid > 0:  
                sys.exit(0)  
    
            open(pidfile, "w+").write("%s" % os.getpid()) 
        
        except OSError:
            sys.exit(1)   
    
        p = TopicCollector()
        p.run()
    
    elif opt == "status":
        pid = get_process_pid(pidfile)
    
        if pid:
            print("Alive, pid: %s" % pid)
        else:
            print("Stopped")
    
    elif opt == "stop":
        pid = get_process_pid(pidfile)
    
        if pid:
            os.kill(pid, signal.SIGTERM)
    
        if os.path.exists(pidfile):
            os.remove(pidfile)
    
        print("Stopped")


if __name__ == "__main__":
    if len(sys.argv) < 2 or sys.argv[1] not in ["status", "start", "stop"]:
        print("Usage: {} <status|start|stop>".format(sys.argv[0]))
    else:
        service(sys.argv[1])
